function init(self)
    msg.post("#", "acquire_input_focus")
    msg.post("back", "disable")
    self.loaded_proxy = nil	
    
    
    -- Update version text label
    local engine_info = sys.get_engine_info()
    local version_str = "Defold " .. engine_info.version .. "\n" .. engine_info.version_sha1
    gui.set_text(gui.get_node("version"), version_str)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("load_example") then
        local proxy = message.proxy
        msg.post(proxy, "load")
    elseif message_id == hash("proxy_loaded") then
        -- The collection has loaded and it's time to enable it.
        msg.post(sender, "enable")
        
        -- Let the loaded collection take over.
        msg.post("#", "release_input_focus")
        -- Disable the main menu.
        msg.post("main_menu", "disable")
        -- Enable the "Back" button
        msg.post("back", "enable")

        self.loaded_proxy = sender
    elseif message_id == hash("back") then
        -- Back to the main menu
        msg.post(self.loaded_proxy, "disable")
        msg.post(self.loaded_proxy, "final")
        msg.post(self.loaded_proxy, "unload")

        -- Reset things in the render script
        msg.post("@render:", "clear_color", { color = vmath.vector4(0, 0, 0, 1) } )
        msg.post("@render:", "no_camera")
        
        -- Enable the main menu.
        msg.post("main_menu", "enable")
        -- Disable the "Back" button
        msg.post("back", "disable")

        -- Take back input.
        msg.post("#", "acquire_input_focus")
    end
end

function on_input(self, action_id, action)
    if action_id == hash("mouse_press") and action.pressed == true then
        local x = action.x
        local y = action.y
            
        -- What nodes do we have.
        local nodes = { "hud", "cards", "magic", "worlds", "lifecycle", "input", "modules",
                        "behaviors", "physics", "animation", "model", "material", "camera",
                        "slice9", "mixer", "fireworks", "pie", "clipping", "fonts", "coroutine",
                        "iap", "collectionfactory", "push", "layouts", 
                        "sound", "gui_templates", "gui_node_adjust", "gamepad", "webview" }
        for i, n in ipairs(nodes) do
            if gui.pick_node(gui.get_node(n), x, y) then
                msg.post(".", "load_example", { proxy="/loader#" .. n .. "proxy" })		
            end
        end
    end	
end

function on_reload(self)
    msg.post(".", "back")
end
